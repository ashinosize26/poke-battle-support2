<MudText Typo="Typo.body2">@($"{Common.GetTypeResistance(0).Mark}無効 {Common.GetTypeResistance(0.25).Mark}耐性(0.25) {Common.GetTypeResistance(0.5).Mark}耐性(0.5) {Common.GetTypeResistance(2).Mark}弱点(2) {Common.GetTypeResistance(4).Mark}弱点(4)")</MudText>
<MudTable Items="@elements" Hover="true" Breakpoint="Breakpoint.None" Dense="true" Striped="true" Bordered="true" >
    <HeaderContent>
        <MudTh Class="px-0"></MudTh>
        @foreach (var poke in Party)
        {
            <MudTh Class="px-0">
                <PokeImageView PokeNo="@poke.No" Fluid="true"/>
            </MudTh>
        }
        <MudTh Class="px-1"><MudText Align="Align.Center" >一貫</MudText></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="AttackTypeName" Class="px-0 py-0">
            <PokeTypeView PokeType="@context.TypeName" SimpleText="true"/>
        </MudTd>
        @foreach (var (value, index) in Party.Select((value, index) => (value, index)))
        {
            <MudTd DataLabel="@($"Poke{index}")" Class="px-1 py-0">
                <MudText Color="@context.Marks[index].MarkColor" Align="Align.Center"><b>@context.Marks[index].Mark</b></MudText>
            </MudTd>
        }
        <MudTd DataLabel="Consistent" Class="px-1 py-0">
            <MudText Align="Align.Center"><b>@(context.Consistent ? "×" : "")</b></MudText>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    /// <summary>
    /// パーティ
    /// </summary>
    [Parameter]
    public PokeModel[] Party { get; set; } = new PokeModel[6] { new(), new(), new(), new(), new(), new() };

    /// <summary>
    /// テーブルデータ
    /// </summary>
    private List<PartyTypeEffectiveRowModel> elements = new();

    /// <summary>
    /// コンストラクタ
    /// </summary>
    /// <returns></returns>
    protected override void OnInitialized()
    {
        // タイプを行、ポケモンを列にするため、各タイプごとにポケモンの耐性を取得して行を作成
        elements.Clear();
        for (int typeIndex = 0; typeIndex < Common.TypeNameList.Length; typeIndex++)
        {
            PartyTypeEffectiveRowModel row = new();

            // タイプ名
            row.TypeName = Common.TypeNameList[typeIndex];

            // ポケモンごとの耐性
            for (int pokeIndex = 0; pokeIndex < Party.Length; pokeIndex++)
            {
                double effectiveValue = 1;
                if (!String.IsNullOrEmpty(Party[pokeIndex].Type1))
                {
                    effectiveValue *= Common.TypeEffectiveTable[typeIndex, Common.ConvertTypeNameToIndex(Party[pokeIndex].Type1)];
                }
                if (!String.IsNullOrEmpty(Party[pokeIndex].Type2))
                {
                    effectiveValue *= Common.TypeEffectiveTable[typeIndex, Common.ConvertTypeNameToIndex(Party[pokeIndex].Type2)];
                }
                row.Marks[pokeIndex] = Common.GetTypeResistance(effectiveValue);
            }

            // 一貫
            row.Consistent = !row.Marks.Any(value => value.EffectiveValue < 1);

            // テーブルに行追加
            elements.Add(row);
        }
    }
}